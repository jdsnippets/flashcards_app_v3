#+STARTUP: indent          # note: to disable -> "noindent" or M-x org-indent-mode
#+OPTIONS: toc:2


* misc notes
** jds: current status in chat...
-> 

** chat
*** flashcard project (v3)
-> https://chatgpt.com/c/6832011f-bc04-8013-9fe3-7f1c3f033e8b
*** 


** sqlite3

*** quick status...

# all-at-once
   sqlite3 flashcards.db "SELECT * FROM assets;"; sqlite3 flashcards.db "SELECT * FROM card_sides;"; sqlite3 flashcards.db "SELECT * FROM card_tags;"; sqlite3 flashcards.db "SELECT * FROM cards;"; sqlite3 flashcards.db "SELECT * FROM reviews;"; sqlite3 flashcards.db "SELECT * FROM tags;"

# one-by-one (alpha)
   sqlite3 flashcards.db "SELECT * FROM assets;"
   sqlite3 flashcards.db "SELECT * FROM card_sides;"
   sqlite3 flashcards.db "SELECT * FROM card_tags;"
   sqlite3 flashcards.db "SELECT * FROM cards;"
   sqlite3 flashcards.db "SELECT * FROM reviews;"
   sqlite3 flashcards.db "SELECT * FROM tags;"


*** delete...
  rm flashcards.db
  alembic upgrade head
  


* getting started

      # ================ UV "global" setup STUFF =================
      uv self update              # success: Upgraded uv from v0.7.6 to v0.7.8! https://github.com/astral-sh/uv/releases/tag/0.7.8
      uv python install 3.13
      uv python pin 3.13
      
      uv init flashcards_app_v3
      cd flashcards_app_v3

      
      # ================ local GIT STUFF =================
      # check...
      git config --global user.name               # neuroskipper
      git config --global user.email              # neuroskipper@gmail.com

      # config for this repo
      git config user.name "jdsnippets"
      git config user.email jds.software@gmail.com
      git config user.name                        # jdsnippets
      git config user.email                       # jds.software@gmail.com
  
      cat .git/config
         [core]
                 repositoryformatversion = 0
                 filemode = true
                 bare = false
                 logallrefupdates = true
                 ignorecase = true
                 precomposeunicode = true
         [user]
                 name = jdsnippets
                 email = jds.software@gmail.com
  
  
      
      # ================ UV project setup STUFF =================
      uv venv .venv --python 3.13
      source .venv/bin/activate
      python --version
  
      uv add fastapi uvicorn pillow python-multipart sqlalchemy aiosqlite
      uv lock

      # create the first version of all dirs & files for the project (backend/... frontend/...)
      
      uv add --editable . --dev
      uv sync
  
  
      cat pyproject.toml 
         [project]
         name = "flashcards-app-v3"
         version = "0.1.0"
         description = "Add your description here"
         readme = "README.md"
         requires-python = ">=3.13"
         dependencies = [
             "aiosqlite>=0.21.0",
             "fastapi>=0.115.12",
             "pillow>=11.2.1",
             "python-multipart>=0.0.20",
             "sqlalchemy>=2.0.41",
             "uvicorn>=0.34.2",
         ]
         
         [dependency-groups]
         dev = [
             "flashcards-app-v3",
         ]
         
         [tool.uv.sources]
         flashcards-app-v3 = { workspace = true }
                     

      # test
      uv run uvicorn backend.main:app --reload --reload-exclude .venv


      git add .
      git commit -m "Initial commit: scaffold project, add backend/frontend/db/scripts"
         # ...  21 files changed, 741 insertions(+)
      

      # Create Remote GitHub Repo
           Go to https://github.com/new
           Name: flashcards_app_v3
           Description: FastAPI-based flashcard app with uv and SQLite
           Do not add a README, .gitignore, or license (you already have them)

          
      # connect and push

          # don't do this...
          #    git remote add origin https://github.com/jdsnippets/flashcards_app_v3.git
          #    since we'd be using HTTPS as the protocol scheme

          # instead, to use ssh, use the command shown below (git remote add origin git@github.com ...)
          #    best for day-to-day dev and pushing code
          git remote add origin git@github.com:jdsnippets/flashcards_app_v3.git
          git branch -M main


          # =================== ssh key: START =======================
          # do the following "once" (for this first git repo,
          # ...and afterwards it'll be all set for subsequent project
          ssh-keygen -t ed25519 -C "jds.software@gmail.com"
            # -> pass phrase:  c....#.S..
            #    this creates:
            #      ~/.ssh/id_ed25519      <- private key (keep secure)
            #      ~/.ssh/id_ed25519.pub  <- public key (you upload this to GitHub)
          cat ~/.ssh/id_ed25519.pub
            # -> copy the full contents (starts with ssh-ed25519...) and...
            # -> Go to: https://github.com/settings/keys
            # -> Click "New SSH key"
            # -> Paste the key
            # -> Give it a title like "jds_macbookair"

          # =================== ssh key: END =======================


          # and finally .... push to github!
          git push -u origin main
          # post-note: if error (wrong user -> "ERROR: Permission to jdsnippets/flashcards_app_v3.git denied to neuroskipper."
          git remote set-url origin git@github-jdsnippets:jdsnippets/flashcards_app_v3.git
          git push -u origin main   # retry

          
      # =================== DB & ALEMBIC INIT/SET UP =======================
      # migration setup sequence
      alembic init alembic

      # 
      # 
      # 
      # 
      # 

      
* populate db with some data
** some previous content...


1|text||How do you apply your lockfile changes to the virtual environment?||2025-05-25 17:48:06.739397
2|text||uv sync||2025-05-25 17:48:06.740206
3|text||How do you create a virtual environment using Python 3.13.3?||2025-05-25 17:48:06.744609
4|text||uv venv .venv --python 3.13.3||2025-05-25 17:48:06.745187
5|text||How do you add key backend dependencies like FastAPI and SQLite with uv?||2025-05-25 17:48:06.746425
6|text||uv add fastapi uvicorn pillow python-multipart sqlalchemy aiosqlite||2025-05-25 17:48:06.746790
7|text||How do you update the uv tool to the latest version?||2025-05-25 17:48:06.747907
8|text||uv self update||2025-05-25 17:48:06.748245
9|text||How do you set your project-specific Git username to 'jdsnippets'?||2025-05-25 17:48:06.749390
10|text||git config user.name "jdsnippets"||2025-05-25 17:48:06.749726
11|text||How do you run a FastAPI app using uvicorn with auto-reload?||2025-05-25 17:48:06.751029
12|text||uv run uvicorn backend.main:app --reload --reload-exclude .venv||2025-05-25 17:48:06.751379
13|text||How do you add the local project in editable mode for development?||2025-05-25 17:48:06.752535
14|text||uv add --editable . --dev||2025-05-25 17:48:06.752841
15|text||How do you verify the current Git config file contents?||2025-05-25 17:48:06.753913
16|text||cat .git/config||2025-05-25 17:48:06.754222
17|text||What command initializes a new Python project using uv?||2025-05-25 17:48:06.755251
18|text||uv init <project_name>||2025-05-25 17:48:06.755562
19|text||How do you activate a uv-created virtual environment?||2025-05-25 17:48:06.756613
20|text||source .venv/bin/activate||2025-05-25 17:48:06.756976
21|text||What command sets your global Git username to 'neuroskipper'?||2025-05-25 17:48:06.758072
22|text||git config --global user.name "neuroskipper"||2025-05-25 17:48:06.758379
23|text||What command locks your uv dependencies for reproducibility?||2025-05-25 17:48:06.759445
24|text||uv lock||2025-05-25 17:48:06.759767
25|text||What command installs Python 3.13.3 using uv?||2025-05-25 17:48:06.760771
26|text||uv python install 3.13.3||2025-05-25 17:48:06.761076


----------

new flashcard!
Q: 
A: 
Tags(s): 

new flashcard!
Q: 
A: 
Tags(s): 

new flashcard!
Q: How do you sync your uv project dependencies to match your lockfile?
A: uv sync
Tags(s): uv

new flashcard!
Q: How do you create a virtual environment using Python 3.13.3 with uv?
A: uv venv .venv --python 3.13.3
Tags(s): uv

new flashcard!
Q: How do you install FastAPI and other backend dependencies using uv?
A: uv add fastapi uvicorn pillow python-multipart sqlalchemy aiosqlite
Tags(s): uv

new flashcard!
Q: How do you upgrade uv to the latest version?
A: uv self update
Tags(s): uv

new flashcard!
Q: How do you set your Git username for this project to jdsnippets?
A: git config user.name "jdsnippets"
Tags(s): git

new flashcard!
Q: How do you run a FastAPI app with uvicorn and auto-reload enabled (using uv)?
A: uv run uvicorn backend.main:app --reload --reload-exclude .venv
Tags(s): uv

new flashcard!
Q: How do you install your local project in editable dev mode using uv?
A: uv add --editable . --dev
Tags(s): uv

new flashcard!
Q: How do you inspect the Git configuration for the current project?
A: cat .git/config
Tags(s): git

new flashcard!
Q: How do you initialize a new Python project with uv?
A: uv init <project_name>
Tags(s): uv

new flashcard!
Q: How do you activate a uv-created virtual environment?
A: source .venv/bin/activate
Tags(s): uv

new flashcard!
Q: How do you set your global Git username to neuroskipper?
A: git config --global user.name "neuroskipper"
Tags(s): git

new flashcard!
Q: How do you lock your project's dependencies with uv for reproducibility?
A: uv lock
Tags(s): uv

new flashcard!
Q: How do you install Python 3.13.3 using uv?
A: uv python install 3.13.3
Tags(s): uv

new flashcard!
Q: cli/shell command tof ind and delete all "__bak*" files under the current dir
A: find . -name "__bak*" -type f -delete
Tags(s): shell

new flashcard!
Q: how do you see what has been modified but not yet staged in git?
A: git diff
Tags(s): git

new flashcard!
Q: 
A: 
Tags(s): 

new flashcard!
Q: 
A: 
Tags(s): 









** 
  - chmod +x db_dummy_populate_v2.sh
    ./db_dummy_populate_v2.sh 

    # confirm
    sqlite3 flash.db
    select * from cards;


  - cat db_dummy_populate_v2.sh 

       #!/bin/zsh
       
       # --- Define capital city flashcards -------------------------
       typeset -A capitals
       capitals=(
         France Paris
         Germany Berlin
         Spain Madrid
         Italy Rome
         Canada "Ottawa"
         Mexico "Mexico City"
         Japan Tokyo
         Australia Canberra
         Brazil "Brasília"
         Kenya Nairobi
       )
       
       # --- Loop over each country and create a card ---------------
       for country in ${(k)capitals}; do
         capital=${capitals[$country]}
       
         # Only proceed if both country and capital are non-empty
         if [[ -n $country && -n $capital ]]; then
           curl -s -X POST http://127.0.0.1:8000/api/cards \
             -F front_type=text \
             -F back_type=text \
             -F front_text="What is the capital of $country?" \
             -F back_text="$capital" \
             -F tags=geo > /dev/null
       
           echo "added: $country"
         fi
       done




** misc notes
*** 
*** 
*** 

** section 1.1
*** section 1.1.1

** section 1.2
*** section 1.2.1

* section 2
** misc notes
*** 
*** 
*** 

** section 2.1
*** section 2.1.1

** section 2.2
*** section 2.2.1

* section 3
** misc notes
*** 
*** 
*** 

** section 3.1
*** section 3.1.1

** section 3.2
*** section 3.2.1
